"use strict";(()=>{var e={};e.id=899,e.ids=[899],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4594:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>h,patchFetch:()=>T,requestAsyncStorage:()=>d,routeModule:()=>c,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var o={};n.r(o),n.d(o,{GET:()=>u,POST:()=>l});var s=n(9303),r=n(8716),a=n(670),i=n(7070),p=n(8990);async function l(){try{console.log("=== TEST APPOINTMENT API ===");let e={name:"Test User",email:"test@example.com",phone:"555-1234",businessName:"Test Business",businessType:"Retail",monthlyRevenue:"$10,000 - $25,000",creditCards:"Yes",establishedBusiness:"Yes",strongCreditScore:"Yes",cleanHistory:"No",preferredDate:new Date().toISOString().split("T")[0],preferredTime:"10:00 AM",timezone:"EST",message:"This is a test appointment",urgency:"High",fundingAmount:"$50,000 - $100,000",isEligible:!0,eligibilityReason:"Eligible"};console.log("Creating test appointment with data:",e);let t=(0,p.Pc)(e);console.log("Test appointment created:",t);let n=(0,p.$U)();return console.log(`Total appointments after creation: ${n.length}`),i.NextResponse.json({success:!0,appointment:t,totalAppointments:n.length,allAppointments:n,message:"Test appointment created successfully"})}catch(e){return console.error("Error creating test appointment:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function u(){try{console.log("=== TEST APPOINTMENT GET ===");let e=(0,p.$U)();return console.log(`Found ${e.length} appointments`),i.NextResponse.json({success:!0,appointments:e,count:e.length,message:"Test appointments retrieved successfully"})}catch(e){return console.error("Error fetching test appointments:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/test-appointment/route",pathname:"/api/test-appointment",filename:"route",bundlePath:"app/api/test-appointment/route"},resolvedPagePath:"/Users/cesararteaga/rami/src/app/api/test-appointment/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:g}=c,h="/api/test-appointment/route";function T(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},8990:(e,t,n)=>{n.d(t,{$U:()=>a,LW:()=>p,Pc:()=>r,sO:()=>i,v9:()=>l});let o=[],s=[{id:"1",username:"rami",password:"rami123",name:"Rami",role:"admin",createdAt:new Date().toISOString()}],r=e=>{console.log("Creating appointment with data:",e);let t={...e,id:Date.now().toString(),status:"pending",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return o.push(t),console.log(`Appointment created with ID: ${t.id}. Total appointments: ${o.length}`),t},a=()=>{console.log(`Getting all appointments. Current count: ${o.length}`);let e=o.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime());return console.log("Returning sorted appointments:",e),e},i=e=>o.find(t=>t.id===e),p=(e,t)=>{console.log(`Updating appointment ${e} to status: ${t}`);let n=o.find(t=>t.id===e);if(n){let o=n.status;return n.status=t,n.updatedAt=new Date().toISOString(),console.log(`Appointment ${e} status changed from ${o} to ${t}`),console.log("Updated appointment:",n),console.log("Server side update - localStorage will be updated on client side"),n}return console.error(`Appointment with ID ${e} not found`),null},l=(e,t)=>s.find(n=>n.username===e&&n.password===t)||null}};var t=require("../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),o=t.X(0,[92,972],()=>n(4594));module.exports=o})();