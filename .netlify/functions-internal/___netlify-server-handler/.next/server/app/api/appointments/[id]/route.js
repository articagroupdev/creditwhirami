"use strict";(()=>{var e={};e.id=499,e.ids=[499],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8976:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>f,patchFetch:()=>A,requestAsyncStorage:()=>c,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var o={};n.r(o),n.d(o,{GET:()=>d,PATCH:()=>u});var r=n(9303),s=n(8716),a=n(670),i=n(7070),p=n(8990);async function d(e,{params:t}){try{let e=(0,p.sO)(t.id);if(!e)return i.NextResponse.json({error:"Appointment not found"},{status:404});return i.NextResponse.json({success:!0,appointment:e})}catch(e){return console.error("Error fetching appointment:",e),i.NextResponse.json({error:"Internal server error"},{status:500})}}async function u(e,{params:t}){try{let n=await e.json(),{status:o}=n;if(console.log(`API PATCH request for appointment ${t.id} with status: ${o}`),console.log("Request body:",n),!o||!["pending","confirmed","completed","cancelled"].includes(o))return console.error(`Invalid status: ${o}. Must be one of: pending, confirmed, completed, cancelled`),i.NextResponse.json({error:"Invalid status. Must be one of: pending, confirmed, completed, cancelled"},{status:400});let r=(0,p.LW)(t.id,o);if(!r)return console.error(`Appointment with ID ${t.id} not found`),i.NextResponse.json({error:"Appointment not found"},{status:404});return console.log(`Appointment ${t.id} successfully updated to ${o}`),console.log("Updated appointment:",r),i.NextResponse.json({success:!0,appointment:r,message:`Appointment status updated to ${o} successfully`,previousStatus:r.status,newStatus:o,updatedAt:r.updatedAt})}catch(e){return console.error("Error updating appointment:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let l=new r.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/appointments/[id]/route",pathname:"/api/appointments/[id]",filename:"route",bundlePath:"app/api/appointments/[id]/route"},resolvedPagePath:"/Users/cesararteaga/rami/src/app/api/appointments/[id]/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:g}=l,f="/api/appointments/[id]/route";function A(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},8990:(e,t,n)=>{n.d(t,{$U:()=>a,LW:()=>p,Pc:()=>s,sO:()=>i,v9:()=>d});let o=[],r=[{id:"1",username:"rami",password:"rami123",name:"Rami",role:"admin",createdAt:new Date().toISOString()}],s=e=>{console.log("Creating appointment with data:",e);let t={...e,id:Date.now().toString(),status:"pending",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return o.push(t),console.log(`Appointment created with ID: ${t.id}. Total appointments: ${o.length}`),t},a=()=>{console.log(`Getting all appointments. Current count: ${o.length}`);let e=o.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime());return console.log("Returning sorted appointments:",e),e},i=e=>o.find(t=>t.id===e),p=(e,t)=>{console.log(`Updating appointment ${e} to status: ${t}`);let n=o.find(t=>t.id===e);if(n){let o=n.status;return n.status=t,n.updatedAt=new Date().toISOString(),console.log(`Appointment ${e} status changed from ${o} to ${t}`),console.log("Updated appointment:",n),console.log("Server side update - localStorage will be updated on client side"),n}return console.error(`Appointment with ID ${e} not found`),null},d=(e,t)=>r.find(n=>n.username===e&&n.password===t)||null}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),o=t.X(0,[92,972],()=>n(8976));module.exports=o})();