"use strict";(()=>{var e={};e.id=566,e.ids=[566],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3015:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>g,patchFetch:()=>f,requestAsyncStorage:()=>u,routeModule:()=>d,serverHooks:()=>m,staticGenerationAsyncStorage:()=>c});var o={};n.r(o),n.d(o,{POST:()=>l});var s=n(9303),a=n(8716),r=n(670),i=n(7070),p=n(8990);async function l(e,{params:t}){try{let n=await e.json(),{action:o}=n;if(console.log(`API POST request for appointment ${t.id} with action: ${o}`),console.log("Request body:",n),!o||!["complete","cancel"].includes(o))return console.error(`Invalid action: ${o}. Must be one of: complete, cancel`),i.NextResponse.json({error:"Invalid action. Must be one of: complete, cancel"},{status:400});let s=(0,p.sO)(t.id);if(!s)return console.error(`Appointment with ID ${t.id} not found`),i.NextResponse.json({error:"Appointment not found"},{status:404});console.log("Found appointment:",s);let a="complete"===o?"completed":"cancelled",r=s.status,l=(0,p.LW)(t.id,a);if(!l)return console.error(`Failed to update appointment ${t.id}`),i.NextResponse.json({error:"Failed to update appointment status"},{status:500});console.log(`Appointment ${t.id} successfully ${o}ed`),console.log("Updated appointment:",l);let d={success:!0,action:o,appointment:l,message:`Appointment ${o}ed successfully`,previousStatus:r,newStatus:a,updatedAt:l.updatedAt,clientInfo:{name:l.name,email:l.email,phone:l.phone,businessName:l.businessName}};return console.log("Response data:",d),i.NextResponse.json(d)}catch(e){return console.error("Error processing appointment action:",e),i.NextResponse.json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let d=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/appointments/[id]/actions/route",pathname:"/api/appointments/[id]/actions",filename:"route",bundlePath:"app/api/appointments/[id]/actions/route"},resolvedPagePath:"/Users/cesararteaga/rami/src/app/api/appointments/[id]/actions/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:u,staticGenerationAsyncStorage:c,serverHooks:m}=d,g="/api/appointments/[id]/actions/route";function f(){return(0,r.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:c})}},8990:(e,t,n)=>{n.d(t,{$U:()=>r,LW:()=>p,Pc:()=>a,sO:()=>i,v9:()=>l});let o=[],s=[{id:"1",username:"rami",password:"rami123",name:"Rami",role:"admin",createdAt:new Date().toISOString()}],a=e=>{console.log("Creating appointment with data:",e);let t={...e,id:Date.now().toString(),status:"pending",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return o.push(t),console.log(`Appointment created with ID: ${t.id}. Total appointments: ${o.length}`),t},r=()=>{console.log(`Getting all appointments. Current count: ${o.length}`);let e=o.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime());return console.log("Returning sorted appointments:",e),e},i=e=>o.find(t=>t.id===e),p=(e,t)=>{console.log(`Updating appointment ${e} to status: ${t}`);let n=o.find(t=>t.id===e);if(n){let o=n.status;return n.status=t,n.updatedAt=new Date().toISOString(),console.log(`Appointment ${e} status changed from ${o} to ${t}`),console.log("Updated appointment:",n),console.log("Server side update - localStorage will be updated on client side"),n}return console.error(`Appointment with ID ${e} not found`),null},l=(e,t)=>s.find(n=>n.username===e&&n.password===t)||null}};var t=require("../../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),o=t.X(0,[92,972],()=>n(3015));module.exports=o})();